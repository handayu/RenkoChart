<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>在MC中加载以下代码，以获得所有的交易盈亏以及信号信息(还包括开仓当根的开仓方向状态和K线走向，以便于知道该笔单子是否需要在盈亏的基础上加入一块砖的成本)：
var:
  MP(0),
  LastTradeProfitPoint(0);
     
MP = marketposition;  
   
if (MP[1] = 0 OR MP[1] = -1) and MP = 1  then begin
   value1 = 1;
   LastTradeProfitPoint = entryprice(1) - exitprice(1);
   if close - open &gt;0 then print(symbolname,"_","BarNum:",currentbar+MaxBarsBack,"_", "1","_",value1,"_",LastTradeProfitPoint,"_",bigpointvalue,"_",absvalue(Open-Close));    
   if close - open &lt;0 then print(symbolname,"_","BarNum:",currentbar+MaxBarsBack,"_", "-1","_",value1,"_",LastTradeProfitPoint,"_",bigpointvalue,"_",absvalue(Open-Close));    
end;
    
if (MP[1] = 0 OR MP[1] = 1) and MP = -1 then begin
   value1 = -1; 
   LastTradeProfitPoint =exitprice(1) - entryprice(1);
   if close - open &lt;0 then  print(symbolname,"_","BarNum:",currentbar+MaxBarsBack,"_", "-1","_",value1,"_",LastTradeProfitPoint,"_",bigpointvalue,"_",absvalue(Open-Close));     
   if close - open &gt;0 then  print(symbolname,"_","BarNum:",currentbar+MaxBarsBack,"_", "1","_",value1,"_",LastTradeProfitPoint,"_",bigpointvalue,"_",absvalue(Open-Close));     
end;
 
1.加载策略时同时加载该脚本进行统计，然后在输出中复制出所有记录到外部Txt中，用工具获取开始分析,
没有加入砖成本和手续费的资金或者点值曲线，应该和MC中回测(无手续费)的资金曲线走向一模一样，
但在加入了可能的砖的成本之后，资金曲线有所打折，分析打折的资金曲线是否是需要的资金曲线。
2.本工具可以同时设置好txt的路径，treeview中添加多个txt回测结果，多品种进行分析，分析完成之后，
还可以对多品种进行砖+手续费成本剔除之后的砖型图策略的投资组合资金曲线分析。   
    

PS:
   关于菜单栏第二项的功能：   在MC中是没有砖型图策略的组合回测的，而简单通过笔数叠加存在的一个问题是不是真正意义上的组合对冲绩效，因为不同的笔数分布在不同的时间，
无法看到真正的组合如果只是通过笔数叠加的话，所以在MC打印交易的时候，可以带上时间戳，根据时间戳做出真正的组合曲线 ；
获取TradeInfo每天最后一条记录代表该策略当天的收益最终资金，然后把其他空缺的日期按照前一笔进行补齐
形成最终的以时间为TimeSeries的资金曲线，横坐标为整日日期，而不再是按笔的资金曲线，然后整合成组合;
[IntrabarOrderGeneration = false]
inputs:
   openshare(1),
   CommisonAndSilpseMonew(120);

variables:  AfStep( 0.02 ), AfLimit( 0.2 ) ;
variables:  var0( 0 ), var1( 0 ), var2( 0 ), var3( 0 ) ;

Value1 = ParabolicSAR( AfStep, AfLimit, var0, var1, var2, var3 ) ;

if Close Cross Above var1 then begin
	Buy ( "B" )openshare shares next bar at market;
end;

if Close Cross Under var1 then begin
	Sell Short ( "S")openshare shares  next bar at market;
end;

var:
  MP(0),
  Quality(0),
  NoRenkoQuality(0);
       
MP = marketposition;  
      
if (MP[1] = 0 OR MP[1] = -1) and MP = 1  then begin

   if close - open &gt;0 then begin 
       Quality = Quality + positionprofit(1) - openshare*CommisonAndSilpseMonew;
       NoRenkoQuality = NoRenkoQuality + positionprofit(1);
       //print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1),"_",NoRenkoQuality,"  NoAdd"); 
       print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1)); 
   end;
      
   if close - open &lt;0 then begin 
       Quality = Quality + positionprofit(1) - openshare*CommisonAndSilpseMonew- openshare*2*absvalue(Open-Close)*bigpointvalue;
       NoRenkoQuality = NoRenkoQuality + positionprofit(1);
       //print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1)-2*absvalue(Open-Close)*bigpointvalue,"_",NoRenkoQuality,"  Add");   
       print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1)-openshare*2*absvalue(Open-Close)*bigpointvalue);   
   end;
   
end;
    
if (MP[1] = 0 OR MP[1] = 1) and MP = -1 then begin

   if close - open &lt;0 then begin 
       Quality = Quality + positionprofit(1) - openshare*CommisonAndSilpseMonew;
       NoRenkoQuality = NoRenkoQuality + positionprofit(1);
       //print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1),"_",NoRenkoQuality,"  NoAdd");
       print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1));
   end; 
   
   if close - open &gt;0 then begin  
       Quality= Quality + positionprofit(1) - openshare*CommisonAndSilpseMonew- openshare*2*absvalue(Open-Close)*bigpointvalue;
       NoRenkoQuality = NoRenkoQuality + positionprofit(1);
       //print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1)-2*absvalue(Open-Close)*bigpointvalue,"_",NoRenkoQuality,"  Add");   
       print(symbolname,"_",Date,"_",Time,"_",Quality,"_",positionprofit(1)-openshare*2*absvalue(Open-Close)*bigpointvalue);
   end;
end;      </value>
  </data>
</root>